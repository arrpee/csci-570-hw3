570 Project Group: Raaj Patil, Raajitha Rajkumar

Insights/Observations:

In this program, we used dynamic programming for our basic algorithm. We have a |m|*|n| matrix that gets updated with the values while traversing through. In the memory plot for this, we can see that the program takes up a lot of space.

In our efficient algorithm, we focus on using O(m) memory and computing the alignment. We do this by creating a size |m|*2 matrix and reusing memory within the columns of the matrix. We can discard old columns because we only need the memory of the column before to compute the alignment so we only need two columns at a time.

We then compute the split node through computing the minimum cost of forward and backward sequence alignment, and then split the problem into subparts, repeating the split node computation in the time proportional to its area. At the base cases where the length of one of the strings is less than 2, we construct the string using the basic sequence alignment algorithm

You can see in our memory and time plots that the efficient algorithm takes up much less space than the basic algorithm, by reusing memory as it divide-and-conquers the solution, but at the cost of more computation.

From our results, we can see that as the problem size got bigger, the memory used stayed basically the same at 12-15 Mb for the efficient algorithm for all problem sizes, while it increased to over 700 Mb for the basic algorithm for the problem size of 8192.

We can attest this to the basic algorithm not reusing any memory while traversing through the matrix, while the efficient algorithm implemented the space efficient sequence alignment algorithms and used the divide and conquer method, while reusing the array from previous iterations.

However, when looking at the CPU time taken as the problem size increased, the basic algorithm took lesser CPU time than the efficient algorithm, but the difference was only a factor of (approximately) 2. This can be seen at problem size 8192 where the time taken for the basic algorithm is 7.13s and the time for the efficient algorithm in 14.42s

We can see that the tradeoff here deems the efficient solution better because systems have only a finite amount of memory. For bigger problem spaces, using less O(m+n) memory over O(mn) memory is very useful. (Benchmark results were obtained on a M1 Macbook and might change on other systems, but the overall pattern should still be the same)


Individual contributions:

The basic algorithm for this project was fully implemented by Raaj P. For the efficient algorithm, Raaj P. and Raajitha R. worked on the forward space efficient, backward space efficient, and recursive functions together. The efficient solution strategies were researched by both of us. Raaj P. handled the plots/outputs while Raajitha R. handled the summary.
